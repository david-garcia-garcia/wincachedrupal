<?php

/**
 * @file
 * Install, update and uninstall functions for Cache module.
 */

/**
 * Implements hook_requirements().
 */
function wincachedrupal_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time.
  $t = get_t();

  // Test WinCache.
  $wincache_enabled = (function_exists('wincache_ucache_info') && ($cache = @wincache_ucache_info()));

  $requirements['wincache'] = array(
    'title' => $t('WinCache version:'),
    'value' => $wincache_enabled ? phpversion('wincache') : $t('Not available'),
    'severity' => $wincache_enabled ? REQUIREMENT_OK : REQUIREMENT_ERROR,
  );

  if ($wincache_enabled) {
    $requirements['wincache']['description'] = $t('WinCache has been running for !duration. Currently caching !num_entries entries. !admin_link',
      array(
        '!duration' => format_interval($cache['total_cache_uptime']),
        '!num_entries' => $cache['total_item_count'],
        '!admin_link' => l('View Wincache Statistics', 'admin/reports/status/wincache'),
      )
    );
  }
  else {
    $requirements['wincache']['description'] = $t('The wincachedrupal module needs the wincache extension see: !link.', array('!link' => l('http://php.net/manual/en/book.wincache.php', '')));
  }
  
  // Check for opcache size configuration.
  if ($phase == 'runtime') {
    $options = ini_get_all('wincache', true);
    if ($options['wincache.ocenabled']['local_value'] == 0) {
      $ocachesize = $options['wincache.ocachesize']['local_value'];
      $requirements['wincache_oc'] = array(
        'title' => $t('Wincache opcode cache size'),
        'value' => $t('Opcode caching is disabled and current cache size is !sizeMb', array('!size' => $ocachesize)),
        'severity' => ($ocachesize > 15) ? REQUIREMENT_ERROR : REQUIREMENT_OK,
        'description' => $t('When opcode caching is disabled, reduce memory pressure on the server by setting wincache.ocachesize to the minimum value allowed (15Mb).')
      );
    }
  }

  return $requirements;
}
